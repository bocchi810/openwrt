name: Build OpenWRT with WOL and Nginx

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 检出源码
        uses: actions/checkout@v4

      - name: 设置编译环境
        run: |
          sudo apt update
          sudo apt install -y build-essential clang flex bison g++ gawk gcc-multilib \
            g++-multilib gettext git libncurses-dev libssl-dev python3 rsync \
            unzip zlib1g-dev file wget python3-pip

      - name: 克隆 OpenWRT 源码
        run: |
          git clone https://github.com/openwrt/openwrt.git openwrt
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 自定义配置 - 启用 WOL 与 Nginx
        run: |
          cd openwrt
          # 清理旧配置
          rm -f .config

          # 基础目标，可以根据你的路由型号改，例如：x86_64 或 ramips/mt7621
          echo "CONFIG_TARGET_x86=y" >> .config
          echo "CONFIG_TARGET_x86_64=y" >> .config

          # 网络唤醒插件
          echo "CONFIG_PACKAGE_luci-app-wol=y" >> .config
          echo "CONFIG_PACKAGE_etherwake=y" >> .config

          # Nginx 及相关 Web 组件（替代 uhttpd）
          echo "CONFIG_PACKAGE_nginx=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-nginx=y" >> .config
          echo "CONFIG_PACKAGE_luci-ssl-nginx=y" >> .config

          # 移除默认 uhttpd 以避免冲突
          echo "# CONFIG_PACKAGE_uhttpd is not set" >> .config
          echo "# CONFIG_PACKAGE_uhttpd-mod-ubus is not set" >> .config
          echo "# CONFIG_PACKAGE_luci-app-uhttpd is not set" >> .config

          # 其他基础包（推荐）
          echo "CONFIG_PACKAGE_luci=y" >> .config
          echo "CONFIG_PACKAGE_luci-compat=y" >> .config
          echo "CONFIG_PACKAGE_luci-base=y" >> .config
          echo "CONFIG_PACKAGE_openssh-sftp-server=y" >> .config
          echo "CONFIG_PACKAGE_htop=y" >> .config
          echo "CONFIG_PACKAGE_curl=y" >> .config
          echo "CONFIG_PACKAGE_wget=y" >> .config

          make defconfig

      - name: 下载依赖
        run: |
          cd openwrt
          make download -j$(nproc) V=s

      - name: 编译固件
        run: |
          cd openwrt
          make -j$(nproc) V=s || make -j1 V=s

      - name: 打包输出固件
        run: |
          mkdir -p artifact
          find openwrt/bin/targets/ -type f \( -name "*.bin" -o -name "*.img" -o -name "*.gz" \) \
            -exec cp {} artifact/ \;

      - name: 上传编译产物
        uses: actions/upload-artifact@v4
        with:
          name: OpenWRT-WOL-Nginx
          path: artifact/
